import * as client from './client';
import * as signature from './signature';
import * as types from './types';
/**
 * HeightLatest is the height that represents the most recent block height.
 */
export declare const HEIGHT_LATEST = 0n;
/**
 * SignatureContext is the context used for signing transactions.
 */
export declare const TRANSACTION_SIGNATURE_CONTEXT = "oasis-core/consensus: tx";
/**
 * FeatureServices indicates support for communicating with consensus services.
 */
export declare const FEATURE_SERVICES: number;
/**
 * FeatureFullNode indicates that the consensus backend is independently fully verifying all
 * consensus-layer blocks.
 */
export declare const FEATURE_FULL_NODE: number;
/**
 * GasOpTxByte is the gas operation identifier for costing each transaction byte.
 */
export declare const GAS_OP_TX_BYTE = "tx_byte";
/**
 * BackendName is the consensus backend name.
 */
export declare const TENDERMINT_BACKEND_NAME = "tendermint";
/**
 * moduleName is the module name used for error definitions.
 */
export declare const MODULE_NAME = "consensus";
/**
 * ErrNoCommittedBlocks is the error returned when there are no committed
 * blocks and as such no state can be queried.
 */
export declare const ERR_NO_COMMITTED_BLOCKS_CODE = 1;
/**
 * ErrOversizedTx is the error returned when the given transaction is too big to be processed.
 */
export declare const ERR_OVERSIZED_TX_CODE = 2;
/**
 * ErrVersionNotFound is the error returned when the given version (height) cannot be found,
 * possibly because it was pruned.
 */
export declare const ERR_VERSION_NOT_FOUND_CODE = 3;
/**
 * ErrUnsupported is the error returned when the given method is not supported by the consensus
 * backend.
 */
export declare const ERR_UNSUPPORTED_CODE = 4;
/**
 * ErrDuplicateTx is the error returned when the transaction already exists in the mempool.
 */
export declare const ERR_DUPLICATE_TX_CODE = 5;
/**
 * ErrInvalidArgument is the error returned when the request contains an invalid argument.
 */
export declare const ERR_INVALID_ARGUMENT_CODE = 6;
/**
 * moduleName is the module name used for error definitions.
 */
export declare const TRANSACTION_MODULE_NAME = "consensus/transaction";
/**
 * ErrInvalidNonce is the error returned when a nonce is invalid.
 */
export declare const TRANSACTION_ERR_INVALID_NONCE_CODE = 1;
/**
 * ErrInsufficientFeeBalance is the error returned when there is insufficient
 * balance to pay consensus fees.
 */
export declare const TRANSACTION_ERR_INSUFFICIENT_FEE_BALANCE_CODE = 2;
/**
 * ErrGasPriceTooLow is the error returned when the gas price is too low.
 */
export declare const TRANSACTION_ERR_GAS_PRICE_TOO_LOW_CODE = 3;
/**
 * ErrUpgradePending is the error returned when an upgrade is pending and the transaction thus
 * cannot be processed right now. The submitter should retry the transaction in this case.
 */
export declare const TRANSACTION_ERR_UPGRADE_PENDING = 4;
export declare function openSignedTransaction(chainContext: string, signed: types.SignatureSigned): Promise<types.ConsensusTransaction>;
export declare function signSignedTransaction(signer: signature.ContextSigner, chainContext: string, transaction: types.ConsensusTransaction): Promise<types.SignatureSigned>;
/**
 * This special hex-hash-of-the-CBOR-encoded signed transaction is useful for interoperability
 * with block explorers, so here's a special function for doing it.
 */
export declare function hashSignedTransaction(signed: types.SignatureSigned): Promise<string>;
export declare class TransactionWrapper<BODY> {
    transaction: types.ConsensusTransaction;
    signedTransaction: types.SignatureSigned;
    constructor(method: string);
    setNonce(nonce: types.longnum): this;
    setFeeAmount(amount: Uint8Array): this;
    setFeeGas(gas: types.longnum): this;
    setBody(body: BODY): this;
    estimateGas(nic: client.NodeInternal, signer: Uint8Array): Promise<number | bigint>;
    sign(signer: signature.ContextSigner, chainContext: string): Promise<void>;
    hash(): Promise<string>;
    submit(nic: client.NodeInternal): Promise<void>;
}
