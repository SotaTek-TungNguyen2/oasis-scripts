import * as signature from './signature';
import * as types from './types';
/**
 * RoleComputeWorker is the compute worker role.
 */
export declare const ROLE_COMPUTE_WORKER: number;
/**
 * RoleStorageWorker is the storage worker role.
 */
export declare const ROLE_STORAGE_WORKER: number;
/**
 * RoleKeyManager is the the key manager role.
 */
export declare const ROLE_KEY_MANAGER: number;
/**
 * RoleValidator is the validator role.
 */
export declare const ROLE_VALIDATOR: number;
/**
 * RoleConsensusRPC is the public consensus RPC services worker role.
 */
export declare const ROLE_CONSENSUS_RPC: number;
/**
 * TEEHardwareInvalid is a non-TEE implementation.
 */
export declare const TEE_HARDWARE_INVALID = 0;
/**
 * TEEHardwareIntelSGX is an Intel SGX TEE implementation.
 */
export declare const TEE_HARDWARE_INTEL_SGX = 1;
/**
 * TEEHardwareReserved is the first reserved hardware implementation
 * identifier. All equal or greater identifiers are reserved.
 */
export declare const TEE_HARDWARE_RESERVED: number;
export declare const INVALID_VERSION = 65536;
/**
 * LatestEntityDescriptorVersion is the latest entity descriptor version that should be used for
 * all new descriptors. Using earlier versions may be rejected.
 */
export declare const LATEST_ENTITY_DESCRIPTOR_VERSION = 2;
/**
 * LatestNodeDescriptorVersion is the latest node descriptor version that should be used for all
 * new descriptors. Using earlier versions may be rejected.
 */
export declare const LATEST_NODE_DESCRIPTOR_VERSION = 1;
/**
 * CodeNoError is the reserved "no error" code.
 */
export declare const CODE_NO_ERROR = 0;
/**
 * UnknownModule is the module name used when the module is unknown.
 */
export declare const UNKNOWN_MODULE = "unknown";
export declare const ERR_UNKNOWN_ERROR_CODE = 1;
export declare const IDENTITY_MODULE_NAME = "identity";
/**
 * ErrCertificateRotationForbidden is returned by RotateCertificates if
 * TLS certificate rotation is forbidden.  This happens when rotation is
 * enabled and an existing TLS certificate was successfully loaded
 * (or a new one was generated and persisted to disk).
 */
export declare const IDENTITY_ERR_CERTIFICATE_ROTATION_FORBIDDEN_CODE = 1;
export declare function openSignedEntity(context: string, signed: types.SignatureSigned): Promise<types.Entity>;
export declare function signSignedEntity(signer: signature.ContextSigner, context: string, entity: types.Entity): Promise<types.SignatureSigned>;
export declare function openMultiSignedNode(context: string, multiSigned: types.SignatureMultiSigned): Promise<types.Node>;
export declare function signMultiSignedNode(signers: signature.ContextSigner[], context: string, node: types.Node): Promise<types.SignatureMultiSigned>;
