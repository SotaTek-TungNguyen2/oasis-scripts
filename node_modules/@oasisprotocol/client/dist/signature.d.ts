import * as nacl from 'tweetnacl';
import * as types from './types';
export declare function combineChainContext(context: string, chainContext: string): string;
export declare function prepareSignerMessage(context: string, message: Uint8Array): Promise<Uint8Array>;
export interface Signer {
    public(): Uint8Array;
    sign(message: Uint8Array): Promise<Uint8Array>;
}
export interface ContextSigner {
    public(): Uint8Array;
    sign(context: string, message: Uint8Array): Promise<Uint8Array>;
}
export declare function verify(publicKey: Uint8Array, context: string, message: Uint8Array, signature: Uint8Array): Promise<boolean>;
export declare function openSigned(context: string, signed: types.SignatureSigned): Promise<Uint8Array>;
export declare function signSigned(signer: ContextSigner, context: string, rawValue: Uint8Array): Promise<types.SignatureSigned>;
export declare function openMultiSigned(context: string, multiSigned: types.SignatureMultiSigned): Promise<Uint8Array>;
export declare function signMultiSigned(signers: ContextSigner[], context: string, rawValue: Uint8Array): Promise<types.SignatureMultiSigned>;
export declare class BlindContextSigner implements ContextSigner {
    signer: Signer;
    constructor(signer: Signer);
    public(): Uint8Array;
    sign(context: string, message: Uint8Array): Promise<Uint8Array>;
}
/**
 * An in-memory signer based on tweetnacl. We've included this for development.
 */
export declare class NaclSigner implements Signer {
    key: nacl.SignKeyPair;
    constructor(key: nacl.SignKeyPair, note: string);
    /**
     * Generate a keypair from a random seed
     * @param note Set to 'this key is not important' to acknowledge the risks
     * @returns Instance of NaclSigner
     */
    static fromRandom(note: string): NaclSigner;
    /**
     * Instanciate from a given secret
     * @param secret 64 bytes ed25519 secret (h) that will be used to sign messages
     * @param note Set to 'this key is not important' to acknowledge the risks
     * @returns Instance of NaclSigner
     */
    static fromSecret(secret: Uint8Array, note: string): NaclSigner;
    /**
     * Instanciate from a given seed
     * @param seed 32 bytes ed25519 seed (k) that will deterministically generate a private key
     * @param note Set to 'this key is not important' to acknowledge the risks
     * @returns Instance of NaclSigner
     */
    static fromSeed(seed: Uint8Array, note: string): NaclSigner;
    /**
     * Returns the 32 bytes public key of this key pair
     * @returns Public key
     */
    public(): Uint8Array;
    /**
     * Signs the given message
     * @param message Bytes to sign
     * @returns Signed message
     */
    sign(message: Uint8Array): Promise<Uint8Array>;
}
