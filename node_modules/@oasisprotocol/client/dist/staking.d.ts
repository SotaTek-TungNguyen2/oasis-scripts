import * as consensus from './consensus';
import * as types from './types';
/**
 * AddressV0Context is the unique context for v0 staking account addresses.
 */
export declare const ADDRESS_V0_CONTEXT_IDENTIFIER = "oasis-core/address: staking";
/**
 * AddressV0Context is the unique context for v0 staking account addresses.
 */
export declare const ADDRESS_V0_CONTEXT_VERSION = 0;
/**
 * AddressRuntimeV0Context is the unique context for v0 runtime account addresses.
 */
export declare const ADDRESS_RUNTIME_V0_CONTEXT_IDENTIFIER = "oasis-core/address: runtime";
/**
 * AddressRuntimeV0Context is the unique context for v0 runtime account addresses.
 */
export declare const ADDRESS_RUNTIME_V0_CONTEXT_VERSION = 0;
/**
 * AddressBech32HRP is the unique human readable part of Bech32 encoded
 * staking account addresses.
 */
export declare const ADDRESS_PREFIX = "oasis";
/**
 * MethodTransfer is the method name for transfers.
 */
export declare const METHOD_TRANSFER = "staking.Transfer";
/**
 * MethodBurn is the method name for burns.
 */
export declare const METHOD_BURN = "staking.Burn";
/**
 * MethodAddEscrow is the method name for escrows.
 */
export declare const METHOD_ADD_ESCROW = "staking.AddEscrow";
/**
 * MethodReclaimEscrow is the method name for escrow reclamations.
 */
export declare const METHOD_RECLAIM_ESCROW = "staking.ReclaimEscrow";
/**
 * MethodAmendCommissionSchedule is the method name for amending commission schedules.
 */
export declare const METHOD_AMEND_COMMISSION_SCHEDULE = "staking.AmendCommissionSchedule";
/**
 * MethodAllow is the method name for setting a beneficiary allowance.
 */
export declare const METHOD_ALLOW = "staking.Allow";
/**
 * MethodWithdraw is the method name for
 */
export declare const METHOD_WITHDRAW = "staking.Withdraw";
export declare const KIND_ENTITY = 0;
export declare const KIND_NODE_VALIDATOR = 1;
export declare const KIND_NODE_COMPUTE = 2;
export declare const KIND_NODE_STORAGE = 3;
export declare const KIND_NODE_KEY_MANAGER = 4;
export declare const KIND_RUNTIME_COMPUTE = 5;
export declare const KIND_RUNTIME_KEY_MANAGER = 6;
export declare const KIND_MAX = 6;
/**
 * SlashConsensusEquivocation is slashing due to equivocation.
 */
export declare const SLASH_CONSENSUS_EQUIVOCATION = 0;
/**
 * SlashBeaconInvalidCommit is slashing due to invalid commit behavior.
 */
export declare const SLASH_BEACON_INVALID_COMMIT = 1;
/**
 * SlashBeaconInvalidReveal is slashing due to invalid reveal behavior.
 */
export declare const SLASH_BEACON_INVALID_REVEAL = 2;
/**
 * SlashBeaconNonparticipation is slashing due to nonparticipation.
 */
export declare const SLASH_BEACON_NONPARTICIPATION = 3;
/**
 * SlashConsensusLightClientAttack is slashing due to light client attacks.
 */
export declare const SLASH_CONSENSUS_LIGHT_CLIENT_ATTACK = 4;
/**
 * SlashRuntimeIncorrectResults is slashing due to submission of incorrect
 * results in runtime executor commitments.
 */
export declare const SLASH_RUNTIME_INCORRECT_RESULTS = 128;
/**
 * SlashRuntimeEquivocation is slashing due to signing two different
 * executor commits or proposed batches for the same round.
 */
export declare const SLASH_RUNTIME_EQUIVOCATION = 129;
/**
 * GasOpTransfer is the gas operation identifier for transfer.
 */
export declare const GAS_OP_TRANSFER = "transfer";
/**
 * GasOpBurn is the gas operation identifier for burn.
 */
export declare const GAS_OP_BURN = "burn";
/**
 * GasOpAddEscrow is the gas operation identifier for add escrow.
 */
export declare const GAS_OP_ADD_ESCROW = "add_escrow";
/**
 * GasOpReclaimEscrow is the gas operation identifier for reclaim escrow.
 */
export declare const GAS_OP_RECLAIM_ESCROW = "reclaim_escrow";
/**
 * GasOpAmendCommissionSchedule is the gas operation identifier for amend commission schedule.
 */
export declare const GAS_OP_AMEND_COMMISSION_SCHEDULE = "amend_commission_schedule";
/**
 * GasOpAllow is the gas operation identifier for allow.
 */
export declare const GAS_OP_ALLOW = "allow";
/**
 * GasOpWithdraw is the gas operation identifier for withdraw.
 */
export declare const GAS_OP_WITHDRAW = "withdraw";
/**
 * ModuleName is a unique module name for the staking module.
 */
export declare const MODULE_NAME = "staking";
/**
 * ErrInvalidArgument is the error returned on malformed arguments.
 */
export declare const ERR_INVALID_ARGUMENT_CODE = 1;
/**
 * ErrInvalidSignature is the error returned on invalid signature.
 */
export declare const ERR_INVALID_SIGNATURE_CODE = 2;
/**
 * ErrInsufficientBalance is the error returned when an operation
 * fails due to insufficient balance.
 */
export declare const ERR_INSUFFICIENT_BALANCE_CODE = 3;
/**
 * ErrInsufficientStake is the error returned when an operation fails
 * due to insufficient stake.
 */
export declare const ERR_INSUFFICIENT_STAKE_CODE = 4;
/**
 * ErrForbidden is the error returned when an operation is forbidden by
 * policy.
 */
export declare const ERR_FORBIDDEN_CODE = 5;
/**
 * ErrInvalidThreshold is the error returned when an invalid threshold kind
 * is specified in a query.
 */
export declare const ERR_INVALID_THRESHOLD_CODE = 6;
/**
 * ErrTooManyAllowances is the error returned when the number of allowances per account would
 * exceed the maximum allowed number.
 */
export declare const ERR_TOO_MANY_ALLOWANCES_CODE = 7;
/**
 * ErrUnderMinDelegationAmount is the error returned when the given escrow
 * amount is lower than the minimum delegation amount specified in the
 * consensus parameters.
 */
export declare const ERR_UNDER_MIN_DELEGATION_AMOUNT_CODE = 8;
/**
 * ModuleName is a unique module name for the staking/token module.
 */
export declare const TOKEN_MODULE_NAME = "staking/token";
/**
 * ErrInvalidTokenValueExponent is the error returned when an invalid token's
 * value base-10 exponent is specified.
 */
export declare const TOKEN_ERR_INVALID_TOKEN_VALUE_EXPONENT_CODE = 1;
export declare function addressFromPublicKey(pk: Uint8Array): Promise<Uint8Array>;
export declare function addressFromRuntimeID(id: Uint8Array): Promise<Uint8Array>;
export declare function addressToBech32(addr: Uint8Array): string;
export declare function addressFromBech32(str: string): Uint8Array;
/**
 * CommonPoolAddress is the common pool address.
 * The address is reserved to prevent it being accidentally used in the actual ledger.
 */
export declare function commonPoolAddress(): Promise<Uint8Array>;
/**
 * FeeAccumulatorAddress is the per-block fee accumulator address.
 * It holds all fees from txs in a block which are later disbursed to validators appropriately.
 * The address is reserved to prevent it being accidentally used in the actual ledger.
 */
export declare function feeAccumulatorAddress(): Promise<Uint8Array>;
/**
 * GovernanceDepositsAddress is the governance deposits address.
 * This address is reserved to prevent it from being accidentally used in the actual ledger.
 */
export declare function governanceDepositsAddress(): Promise<Uint8Array>;
export declare function transferWrapper(): consensus.TransactionWrapper<types.StakingTransfer>;
export declare function burnWrapper(): consensus.TransactionWrapper<types.StakingBurn>;
export declare function addEscrowWrapper(): consensus.TransactionWrapper<types.StakingEscrow>;
export declare function reclaimEscrowWrapper(): consensus.TransactionWrapper<types.StakingReclaimEscrow>;
export declare function amendCommissionScheduleWrapper(): consensus.TransactionWrapper<types.StakingAmendCommissionSchedule>;
export declare function allowWrapper(): consensus.TransactionWrapper<types.StakingAllow>;
export declare function withdrawWrapper(): consensus.TransactionWrapper<types.StakingWithdraw>;
